# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import menza_pb2 as menza__pb2


class DatabaseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Save = channel.unary_unary(
                '/Database/Save',
                request_serializer=menza__pb2.Model.SerializeToString,
                response_deserializer=menza__pb2.Response.FromString,
                )
        self.Load = channel.unary_unary(
                '/Database/Load',
                request_serializer=menza__pb2.DatabaseQuery.SerializeToString,
                response_deserializer=menza__pb2.QueryResult.FromString,
                )


class DatabaseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Save(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Load(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Save': grpc.unary_unary_rpc_method_handler(
                    servicer.Save,
                    request_deserializer=menza__pb2.Model.FromString,
                    response_serializer=menza__pb2.Response.SerializeToString,
            ),
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=menza__pb2.DatabaseQuery.FromString,
                    response_serializer=menza__pb2.QueryResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Database', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Database(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/Save',
            menza__pb2.Model.SerializeToString,
            menza__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/Load',
            menza__pb2.DatabaseQuery.SerializeToString,
            menza__pb2.QueryResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MediatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewEmail = channel.unary_unary(
                '/Mediator/NewEmail',
                request_serializer=menza__pb2.Email.SerializeToString,
                response_deserializer=menza__pb2.Response.FromString,
                )
        self.WriteEmail = channel.unary_unary(
                '/Mediator/WriteEmail',
                request_serializer=menza__pb2.Email.SerializeToString,
                response_deserializer=menza__pb2.Response.FromString,
                )
        self.SubscribeEmail = channel.unary_unary(
                '/Mediator/SubscribeEmail',
                request_serializer=menza__pb2.SubscribeMail.SerializeToString,
                response_deserializer=menza__pb2.Response.FromString,
                )
        self.ReadEmails = channel.unary_unary(
                '/Mediator/ReadEmails',
                request_serializer=menza__pb2.EmailQuery.SerializeToString,
                response_deserializer=menza__pb2.QueryResult.FromString,
                )
        self.WriteMenza = channel.unary_unary(
                '/Mediator/WriteMenza',
                request_serializer=menza__pb2.Menza.SerializeToString,
                response_deserializer=menza__pb2.Response.FromString,
                )
        self.ReadMenza = channel.unary_unary(
                '/Mediator/ReadMenza',
                request_serializer=menza__pb2.MenzaQuery.SerializeToString,
                response_deserializer=menza__pb2.Menza.FromString,
                )
        self.ListRestaurants = channel.unary_unary(
                '/Mediator/ListRestaurants',
                request_serializer=menza__pb2.MenzaQuery.SerializeToString,
                response_deserializer=menza__pb2.QueryResult.FromString,
                )
        self.ListDishes = channel.unary_unary(
                '/Mediator/ListDishes',
                request_serializer=menza__pb2.MenzaQuery.SerializeToString,
                response_deserializer=menza__pb2.QueryResult.FromString,
                )


class MediatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NewEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadEmails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteMenza(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadMenza(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRestaurants(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDishes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MediatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.NewEmail,
                    request_deserializer=menza__pb2.Email.FromString,
                    response_serializer=menza__pb2.Response.SerializeToString,
            ),
            'WriteEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteEmail,
                    request_deserializer=menza__pb2.Email.FromString,
                    response_serializer=menza__pb2.Response.SerializeToString,
            ),
            'SubscribeEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeEmail,
                    request_deserializer=menza__pb2.SubscribeMail.FromString,
                    response_serializer=menza__pb2.Response.SerializeToString,
            ),
            'ReadEmails': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadEmails,
                    request_deserializer=menza__pb2.EmailQuery.FromString,
                    response_serializer=menza__pb2.QueryResult.SerializeToString,
            ),
            'WriteMenza': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteMenza,
                    request_deserializer=menza__pb2.Menza.FromString,
                    response_serializer=menza__pb2.Response.SerializeToString,
            ),
            'ReadMenza': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadMenza,
                    request_deserializer=menza__pb2.MenzaQuery.FromString,
                    response_serializer=menza__pb2.Menza.SerializeToString,
            ),
            'ListRestaurants': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRestaurants,
                    request_deserializer=menza__pb2.MenzaQuery.FromString,
                    response_serializer=menza__pb2.QueryResult.SerializeToString,
            ),
            'ListDishes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDishes,
                    request_deserializer=menza__pb2.MenzaQuery.FromString,
                    response_serializer=menza__pb2.QueryResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Mediator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mediator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NewEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mediator/NewEmail',
            menza__pb2.Email.SerializeToString,
            menza__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mediator/WriteEmail',
            menza__pb2.Email.SerializeToString,
            menza__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mediator/SubscribeEmail',
            menza__pb2.SubscribeMail.SerializeToString,
            menza__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadEmails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mediator/ReadEmails',
            menza__pb2.EmailQuery.SerializeToString,
            menza__pb2.QueryResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteMenza(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mediator/WriteMenza',
            menza__pb2.Menza.SerializeToString,
            menza__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadMenza(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mediator/ReadMenza',
            menza__pb2.MenzaQuery.SerializeToString,
            menza__pb2.Menza.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRestaurants(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mediator/ListRestaurants',
            menza__pb2.MenzaQuery.SerializeToString,
            menza__pb2.QueryResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDishes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mediator/ListDishes',
            menza__pb2.MenzaQuery.SerializeToString,
            menza__pb2.QueryResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EmailServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendEmail = channel.unary_unary(
                '/EmailService/SendEmail',
                request_serializer=menza__pb2.MenzaMail.SerializeToString,
                response_deserializer=menza__pb2.Response.FromString,
                )
        self.SendVerification = channel.unary_unary(
                '/EmailService/SendVerification',
                request_serializer=menza__pb2.Email.SerializeToString,
                response_deserializer=menza__pb2.Response.FromString,
                )
        self.SendConfirmation = channel.unary_unary(
                '/EmailService/SendConfirmation',
                request_serializer=menza__pb2.ConfirmationMail.SerializeToString,
                response_deserializer=menza__pb2.Response.FromString,
                )


class EmailServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendVerification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendConfirmation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmailServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEmail,
                    request_deserializer=menza__pb2.MenzaMail.FromString,
                    response_serializer=menza__pb2.Response.SerializeToString,
            ),
            'SendVerification': grpc.unary_unary_rpc_method_handler(
                    servicer.SendVerification,
                    request_deserializer=menza__pb2.Email.FromString,
                    response_serializer=menza__pb2.Response.SerializeToString,
            ),
            'SendConfirmation': grpc.unary_unary_rpc_method_handler(
                    servicer.SendConfirmation,
                    request_deserializer=menza__pb2.ConfirmationMail.FromString,
                    response_serializer=menza__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EmailService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmailService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmailService/SendEmail',
            menza__pb2.MenzaMail.SerializeToString,
            menza__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendVerification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmailService/SendVerification',
            menza__pb2.Email.SerializeToString,
            menza__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendConfirmation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmailService/SendConfirmation',
            menza__pb2.ConfirmationMail.SerializeToString,
            menza__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
