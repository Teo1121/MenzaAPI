syntax = "proto3";

// naming convention for protobuff https://developers.google.com/protocol-buffers/docs/style

message Email {
    int32 id = 1;
    string uuid = 2;
    string address = 3;
}

enum Meal {
    UNKNOWN = 0;
    LUNCH = 1;
    DINNER = 2;
}

message Dish {
    int32 id = 1;
    string name = 2;
}

message Restaurant {
    int32 id = 1;
    string name = 2;
}

message Menu {
    int32 id = 1;
    string name = 2; 
    Meal meal = 3;
}

message Offer {
    int32 id = 1;
    int32 id_restaurant = 2;
    int32 id_menu = 3;
    string date = 4; // ISO 8601 date string
}

message DishOffer {
    int32 id = 1;
    int32 id_dish = 2;
    int32 id_offer = 3;  
}

message Subscription {
    int32 id = 1;
    int32 id_email = 2;
    int32 id_restaurant = 3;
}

message Model {
    oneof model {
        Email email = 1;
        Dish dish = 2;
        Restaurant restaurant = 3;
        Menu menu = 4;
        Offer offer = 5;
        DishOffer dish_offer = 6;
        Subscription subscription = 7;
    }  
}


message DatabaseQuery {
    string what = 1;
    string table = 2;
    map<string,string> where = 3;
}

message MenzaQuery {
    oneof identifier {
        string restaurant_name = 1;
        int32 restaurant_id = 2;
    } 
}

message EmailQuery {
}

message QueryResult {
    repeated Model data = 1;
}

message Menza {
    message MenuArray {
        Menu menu = 1;
        repeated Dish dishes = 2;
    }
    Restaurant restaurant = 1;
    repeated MenuArray lunch = 2;
    repeated MenuArray dinner = 3;
}

message MenzaMail {
    Email email = 1;
    Menza data = 2;
}

message SubscribeMail {
    Email email = 1;
    repeated MenzaQuery restaurants = 2;  
}

message ConfirmationMail {
    Email email = 1;
    bool has_subscribed = 2;
}

message Response {
    oneof message {
        string msg = 1;
        int32 model_id = 2;
    }
}

service Database {
    rpc Save(Model) returns (Response) {}
    rpc Load(DatabaseQuery) returns (QueryResult) {}
}

service Mediator {
    rpc NewEmail(Email) returns (Response) {}
    rpc WriteEmail(Email) returns (Response) {}
    rpc SubscribeEmail(SubscribeMail) returns (Response) {}
    rpc ReadEmails(EmailQuery) returns (QueryResult) {}
    rpc WriteMenza(Menza) returns (Response) {}
    rpc ReadMenza(MenzaQuery) returns (Menza) {}
    rpc ListRestaurants(MenzaQuery) returns (QueryResult) {}
}

service EmailService {
    rpc SendEmail(MenzaMail) returns (Response) {}
    rpc SendVerification(Email) returns (Response) {}
    rpc SendConfirmation(ConfirmationMail) returns (Response) {}
}